name: terraform test

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

# jobs:
#   job1:
#     runs-on: ubuntu-latest
#     # Map a step output to a job output
#     outputs:
#       output1: ${{ steps.step1.outputs.test }}
#       output2: ${{ steps.step2.outputs.test }}
#     steps:
#       - id: step1
#         run: echo "test=hello" >> "$GITHUB_OUTPUT"
#       - id: step2
#         run: echo "test=world" >> "$GITHUB_OUTPUT"
#   job2:
#     runs-on: ubuntu-latest
#     needs: job1
#     steps:
#       - env:
#           OUTPUT1: ${{needs.job1.outputs.output1}}
#           OUTPUT2: ${{needs.job1.outputs.output2}}
#         run: echo "$OUTPUT1 $OUTPUT2"
jobs:
  terrafom:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: .
    steps:
      - name: 'Checkout from git'
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.0
          
      - name: Terraform init
        id: init
        run: terraform init -input=false

      - name: Terraform plan
        if: steps.init.outcome == 'success'
        id: plan
        run: terraform plan -input=false -no-color

      - name: Terraform apply
        if: steps.plan.outcome == 'success'
        id: apply
        run: terraform apply -input=false -no-color -auto-approve

      - name: Get VPC Id
        if: steps.apply.outcome == 'success'
        id: getID
        run: |
          output="VPC_ID="$(terraform output vpc_id123)
          output1=${output/"%0A"/""}
          echo $output1 >> $GITHUB_OUTPUT

          subnetStr="private_subnet_ids="$(terraform output private_subnet_ids)
          subnetStr=${subnetStr/"%0A"/""}
          echo $subnetStr >> $GITHUB_OUTPUT

      - name: print vpc id
        if: steps.apply.outcome == 'success'
        id: printid
        run: |
          echo ${{steps.getID.outputs.VPC_ID}}
          echo ${{steps.getID.outputs.private_subnet_ids}}
          
      - name: Terraform subnet init
        id: subnet-init
        run: terraform -chdir="./module/subnet" init -input=false

      - name: Terraform subnet plan
        if: steps.subnet-init.outcome == 'success'
        id: subnet-plan
        run: terraform -chdir="./module/subnet" plan -input=false -no-color

      - name: Terraform subnet apply
        if: steps.subnet-plan.outcome == 'success'
        id: subnet-apply
        run: |
          terraform -chdir="./module/subnet" apply -var vpc_id_for_subnet="${{steps.getID.outputs.VPC_ID}}" -input=false -no-color -auto-approve

      - name: Terraform destroy
        if: steps.apply.outcome == 'success'
        id: destroy
        run: terraform destroy -input=false -no-color -auto-approve